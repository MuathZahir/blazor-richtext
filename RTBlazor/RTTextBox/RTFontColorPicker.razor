<input type="color" @oninput="ApplyColor" @bind="TextBox.SelectedColor"
       style="background-color: @CurrentColor(); 
              width: 40px; height: 32px; position: relative;
              transform: translate(0px, 1px); cursor: pointer;"
       class="transition transition-duration:1s p-1 rounded m-3 border"
       @onmouseenter="() => IsHovered = true"
       @onmouseleave="() => IsHovered = false"/>

@code
{
    [Parameter]
    public string NormalBackgroundColor { get; set; } = "transparent";

    [Parameter]
    public string HoverBackgroundColor { get; set; } = "gray";

    [CascadingParameter]
    public RTTextBox TextBox { get; set; }

    [CascadingParameter]
    public Func<Style, Task> ApplyStyle { get; set; } = d => Task.CompletedTask;
    
    public bool IsHovered { get; set; }

    public async Task ApplyColor(ChangeEventArgs e)
    {
        await ApplyStyle(new Style(color: e.Value.ToString()));
    }

    private string CurrentColor()
    {
        return IsHovered ? HoverBackgroundColor : NormalBackgroundColor;
    }
}